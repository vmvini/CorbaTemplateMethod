/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pos.corba.template.server;

import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;
import pos.corba.template.addressconfig.Address;

/**
 * 
 * @author vmvini
 * @param <R> This must be the remote object interface generated by your IDL
 * @param <T> This must be the POA abstract class implementation and must implement the RemoteObjectTemplate interface
 */
public abstract class CorbaServer<R, T extends RemoteObjectTemplate> {
    
    protected ORB orb;
    protected Address address = new Address();
    protected POA rootPOA;
    
    private void setORB(){
        orb = ORB.init(address.getConnectionArgs(), System.getProperties());
    }
    
    private void setPOA() throws InvalidName{
        rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
    }
    
    
    /**
     * Method to create the servant
     * You should instantiating and return your concrete class that implements the POA abstract class generated by idlj
     * @return POA's abstract class implementation which is also a Servant 
     */
    protected abstract T buildLocalObject();
    
    /**
     * You should define the remote object's name here
     * @return remote object's name
     */
    protected abstract String getResourceName();
    
    /**
     * You should implement something like this 'return YourObjHelper.narrow(ref);'
     * where YourObjHelper is a class *Helper.java generated by idlj compiler.
     * @param ref
     * @return R - object that implements the remote object interface generated by your IDL
     */
    protected abstract R getRemoteObject(org.omg.CORBA.Object ref);
    
    
    /**
     * if you want to do something when the remote object is deployed, implement this method
     * @param remoteObject 
     */
    protected abstract void afterDeploy(R remoteObject);
    
    
    /**
     * if you want to do something before the server shutdown, implement this method.
     */
    protected abstract void beforeShutdown();
    
    public void startServer() throws InvalidName, ServantNotActive, WrongPolicy, org.omg.CosNaming.NamingContextPackage.InvalidName, NotFound, CannotProceed, AdapterInactive{
        
        setORB();
        setPOA();
            
        T localObject = buildLocalObject();
        localObject.setORB(orb);
            
        org.omg.CORBA.Object ref = rootPOA.servant_to_reference( localObject.castThisToServant() );
        
        R href = getRemoteObject(ref);
            
        org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
            
        String name = getResourceName();
            
        NameComponent path[] = ncRef.to_name(name);
            
        ncRef.rebind(path, (org.omg.CORBA.Object)href);
            
        rootPOA.the_POAManager().activate();
            
        afterDeploy(href);
            
        orb.run();
            
        beforeShutdown();
    }
    
    
}
